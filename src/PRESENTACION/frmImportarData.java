/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportarBD.java
 *
 * Created on 10/01/2013, 11:36:20 AM
 */
package PRESENTACION;

import ENTIDADES.*;
import NEGOCIO.*;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author pc
 */
public class frmImportarData extends javax.swing.JInternalFrame {

    /**
     * Creates new form ImportarBD
     */
    public frmImportarData() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setFrameIcon(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/Botones/actualizar.png"))); // NOI18N
        jButton1.setText("ACTUALIZAR BASE DE DATOS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // TODO add your handling code here:
        DefaultTableModel dtm;
        ArrayList datos_recibidos = new ArrayList();

        JFileChooser fileChooser = new JFileChooser(".");
        int status = fileChooser.showOpenDialog(null); //fileChooser

        if (status == JFileChooser.APPROVE_OPTION) {

            File selectedFile = fileChooser.getSelectedFile();

//            leerExcel l = new leerExcel();
            String direccion = selectedFile.getParent() + "/" + selectedFile.getName();

            try {
                FileInputStream fileInputStream = new FileInputStream(direccion);
                HSSFWorkbook workbook = new HSSFWorkbook(fileInputStream);
                HSSFSheet worksheet = workbook.getSheet("Certificados Emitidos");

                Iterator rowIterator = worksheet.rowIterator();

                List lstCertificados = new ArrayList<Certificado>();
                List lstVehiculos = new ArrayList<Vehiculo>();
                List lstResultados = new ArrayList<Resultados>();
                List lstObservaciones = new ArrayList<Observacion>();

                Certificado objCertificado = new Certificado();
                Vehiculo objVehiculos = new Vehiculo();
                Resultados objResultado = new Resultados();
                Observacion objObservacion = new Observacion();

                while (rowIterator.hasNext()) {
                    HSSFRow hssfRow = (HSSFRow) rowIterator.next();
                    Iterator iterator = hssfRow.cellIterator();
                    List cellTempList = new ArrayList();
                    while (iterator.hasNext()) {
                        HSSFCell hssfCell = (HSSFCell) iterator.next();
                        cellTempList.add(hssfCell);
                    }
                    int cont = cellTempList.size();

                    SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");

                    int i = 0;
                    objCertificado.setIdCertificado(Integer.parseInt(cellTempList.get(i + 1).toString()));
                    objCertificado.setTipoDocTransp(cellTempList.get(i + 2).toString());
                    objCertificado.setNumDocEvaluar(cellTempList.get(i + 3).toString());
                    objCertificado.setClaseAutorizacion(cellTempList.get(i + 4).toString());
                    objCertificado.setResultado(Integer.parseInt(cellTempList.get(i + 5).toString()));
                    objCertificado.setVigencia(cellTempList.get(i + 6).toString());
                    try {
                        if (cellTempList.get(i + 7).toString().equals("-")) {
                            objCertificado.setFecInspeccion(formatter.parse("00/00/0000"));
                        } else {
                            objCertificado.setFecInspeccion(formatter.parse(cellTempList.get(i + 7).toString()));
                        }
                        if (cellTempList.get(i + 8).toString().equals("-")) {
                            objCertificado.setFecVencimiento(formatter.parse("00/00/0000"));
                        } else {
                            objCertificado.setFecVencimiento(formatter.parse(cellTempList.get(i + 8).toString()));
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(frmImportarData.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    objCertificado.setcIdentidadCert(cellTempList.get(i + 9).toString());
                    objCertificado.setCodLocal(cellTempList.get(i + 10).toString());
                    objCertificado.setUbigeo(cellTempList.get(i + 11).toString());
                    objCertificado.setIdTarjeta(Integer.parseInt(cellTempList.get(i + 12).toString()));

                    lstCertificados.add(objCertificado);

                    //objVehiculos.setIdTarjeta(cellTempList.get(i+12).toString());
                    objVehiculos.setPlaca(cellTempList.get(i + 13).toString());
                    objVehiculos.setIdCertificado(Integer.parseInt(cellTempList.get(i + 1).toString()));
                    //objVehiculos.setnTarjeta(cellTempList.get(i+14).toString());
                    //objVehiculos.setNombrePropietario(cellTempList.get(i+15).toString());
                    //objVehiculos.setDomicilio(cellTempList.get(i+16).toString());
                    //objVehiculos.setVersion(cellTempList.get(i+17).toString()); //Clase
                    objVehiculos.setIdMarca(cellTempList.get(i + 18).toString());
                    objVehiculos.setAnio(Integer.parseInt(cellTempList.get(i + 19).toString()));
                    objVehiculos.setIdModelo(cellTempList.get(i + 20).toString());
                    //objVehiculos.setVersion(cellTempList.get(i+21).toString());
                    objVehiculos.setIdCombustible(cellTempList.get(i + 22).toString());
                    objVehiculos.setIdCarroceria(cellTempList.get(i + 23).toString());
                    objVehiculos.setnEjes(Integer.parseInt(cellTempList.get(i + 24).toString()));
                    objVehiculos.setColor(cellTempList.get(i + 25).toString());
                    objVehiculos.setMotor(cellTempList.get(i + 26).toString());
                    objVehiculos.setNumCilindros(Integer.parseInt(cellTempList.get(i + 27).toString()));
                    objVehiculos.setSerie(cellTempList.get(i + 28).toString());
                    //objVehiculos.setVin(cellTempList.get(i+29).toString());
                    objVehiculos.setNumRuedas(Integer.parseInt(cellTempList.get(i + 30).toString()));
                    objVehiculos.setNumPasajeros(Integer.parseInt(cellTempList.get(i + 31).toString()));
                    objVehiculos.setNumAsientos(Integer.parseInt(cellTempList.get(i + 32).toString()));
                    objVehiculos.setPesoNeto(Double.parseDouble(cellTempList.get(i + 33).toString()));
                    objVehiculos.setPesoBruto(Double.parseDouble(cellTempList.get(i + 34).toString()));
                    objVehiculos.setLargo(Double.parseDouble(cellTempList.get(i + 35).toString()));
                    objVehiculos.setAlto(Double.parseDouble(cellTempList.get(i + 36).toString()));
                    objVehiculos.setAncho(Double.parseDouble(cellTempList.get(i + 37).toString()));
                    objVehiculos.setCargaUtil(Double.parseDouble(cellTempList.get(i + 38).toString()));
                    //objVehiculos.setEstado(cellTempList.get(i+38).toString());

                    //Falta categor√≠a
                    //Num Puertas
                    //Num Salidas
                    
                    lstVehiculos.add(objVehiculos);
                    
                    objResultado.setIdCertificado(Integer.parseInt(cellTempList.get(i + 1).toString()));
                    objResultado.setPruebaAli(Integer.parseInt(cellTempList.get(i + 41).toString()));
                    objResultado.setProfNeuma(Integer.parseInt(cellTempList.get(i + 42).toString()));
                    objResultado.setPruebLuces(Integer.parseInt(cellTempList.get(i + 43).toString()));
                    objResultado.setSuspension(Integer.parseInt(cellTempList.get(i + 44).toString()));
                    objResultado.setEmigases(Integer.parseInt(cellTempList.get(i + 45).toString()));
                    objResultado.setFreServ(Integer.parseInt(cellTempList.get(i + 46).toString()));
                    objResultado.setFreeEstac(Integer.parseInt(cellTempList.get(i + 47).toString()));
                    objResultado.setFreeEmer(Integer.parseInt(cellTempList.get(i + 48).toString()));
                    objResultado.setDisEjes(Integer.parseInt(cellTempList.get(i + 49).toString()));
                    objResultado.setPisos(Integer.parseInt(cellTempList.get(i + 50).toString()));

                    lstResultados.add(objResultado);
                }

                HSSFSheet worksheet2 = workbook.getSheet("Observaciones");

                Iterator rowIterator2 = worksheet.rowIterator();

                while (rowIterator2.hasNext()) {
                    HSSFRow hssfRow = (HSSFRow) rowIterator2.next();
                    Iterator iterator = hssfRow.cellIterator();
                    List cellTempList = new ArrayList();
                    while (iterator.hasNext()) {
                        HSSFCell hssfCell = (HSSFCell) iterator.next();
                        cellTempList.add(hssfCell);
                    }
                    int cont = cellTempList.size();
                    int i = 0;

                    objObservacion.setIdCertificado(Integer.parseInt(cellTempList.get(i).toString()));
                    objObservacion.setCodigoObservacion(cellTempList.get(i + 1).toString());
                    objObservacion.setInterpretacion(cellTempList.get(i + 2).toString());
                    objObservacion.setCalificacion(cellTempList.get(i + 3).toString());

                    lstObservaciones.add(objObservacion);
                }

                //Verificar Si existe ese n√∫mero de certificado
                WServiceBL objWServCBL = new WServiceBL();

                //Grabando los vehiculos leidos del excel                
                VehiculoBL objVehiculoBL = new VehiculoBL();
                for (int i = 0; i < lstVehiculos.size(); i++) {
                    Vehiculo objV = new Vehiculo();
                    objV = (Vehiculo) lstVehiculos.get(i);
                    int resultado = objWServCBL.existeCertificado(objV.getIdCertificado());

                    if (resultado == 0) {
                        objVehiculoBL.registrarVehiculo(objV);
                    }
                }

                //Grabando los resultado leidos del excel                
                WServiceBL objWServBL = new WServiceBL();
                for (int i = 0; i < lstResultados.size(); i++) {
                    Resultados objR = new Resultados();
                    objR = (Resultados) lstResultados.get(i);
                    int resultado = objWServCBL.existeCertificado(objR.getIdCertificado());
                    if (resultado == 0) {
                        objWServBL.registrarResultado(objR);
                    }
                }

                //Grabando los certificados leidos del excel                
                WServiceBL objWServiceBL = new WServiceBL();
                for (int i = 0; i < lstCertificados.size(); i++) {
                    Certificado objR = new Certificado();
                    objR = (Certificado) lstCertificados.get(i);
                    int resultado = objWServCBL.existeCertificado(objR.getIdCertificado());
                    if (resultado == 0) {
                        objWServiceBL.registrarCertificado(objR);
                    }
                }

                //Grabando las observaciones leidos del excel   
                WServiceBL objObservacionesBL = new WServiceBL();
                for (int i = 0; i < lstObservaciones.size(); i++) {
                    Observacion objO = new Observacion();
                    objO = (Observacion) lstObservaciones.get(i);
                    int resultado = objWServCBL.existeCertificado(objO.getIdCertificado());
                    if (resultado == 0) {
                        objObservacionesBL.registrarObservacion(objO);
                    }
                }

            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

        } else if (status == JFileChooser.CANCEL_OPTION) {
            System.out.println("cancele");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

}
