/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportarBD.java
 *
 * Created on 10/01/2013, 11:36:20 AM
 */
package PRESENTACION;

import ENTIDADES.*;
import NEGOCIO.*;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author pc
 */
public class frmImportarData extends javax.swing.JInternalFrame {

    /**
     * Creates new form ImportarBD
     */
    public frmImportarData() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setFrameIcon(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/Botones/actualizar.png"))); // NOI18N
        jButton1.setText("ACTUALIZAR BASE DE DATOS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // TODO add your handling code here:
        DefaultTableModel dtm;
        ArrayList datos_recibidos = new ArrayList();

        JFileChooser fileChooser = new JFileChooser(".");
        int status = fileChooser.showOpenDialog(null); //fileChooser

        if (status == JFileChooser.APPROVE_OPTION) {

            File selectedFile = fileChooser.getSelectedFile();

//            leerExcel l = new leerExcel();
            String direccion = selectedFile.getParent() + "/" + selectedFile.getName();

            try {
                FileInputStream fileInputStream = new FileInputStream(direccion);
                HSSFWorkbook workbook = new HSSFWorkbook(fileInputStream);
                HSSFSheet worksheet = workbook.getSheet("Certificados Emitidos");

                Iterator rowIterator = worksheet.rowIterator();

                List lstCertificados = new ArrayList<Certificado>();
                List lstVehiculos = new ArrayList<Vehiculo>();
                List lstResultados = new ArrayList<Resultados>();
                List lstObservaciones = new ArrayList<Observacion>();

                boolean rpta = true;

                int i = 0;

                while (rowIterator.hasNext()) {
                    HSSFRow hssfRow = (HSSFRow) rowIterator.next();
                    Iterator iterator = hssfRow.cellIterator();
                    List cellTempList = new ArrayList();
                    Certificado objCertificado = new Certificado();
                    Vehiculo objVehiculos = new Vehiculo();
                    Resultados objResultado = new Resultados();
                    while (iterator.hasNext()) {
                        HSSFCell hssfCell = (HSSFCell) iterator.next();
                        cellTempList.add(hssfCell);
                    }
                    int cont = cellTempList.size();

                    if (i > 0) {

                        objCertificado.setIdCertificado(Integer.parseInt(cellTempList.get(0).toString()));
                        objCertificado.setTipoDocTransp(cellTempList.get(1).toString());
                        objCertificado.setNumDocEvaluar(cellTempList.get(2).toString());
                        objCertificado.setClaseAutorizacion(cellTempList.get(3).toString());
                        objCertificado.setResultado(Integer.parseInt(cellTempList.get(4).toString()));
                        objCertificado.setVigencia(cellTempList.get(5).toString());

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                        String dateInString6 = cellTempList.get(6).toString();
                        String dateInString7 = cellTempList.get(7).toString();
                        if (dateInString6.equals("-")) {
                            Date d1 = formatter.parse("2100-12-31");
                            objCertificado.setFecInspeccion1(d1);
                        } else {
                            Date date6 = null;
                            try {
                                date6 = formatter.parse(dateInString6);
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                            objCertificado.setFecInspeccion1(date6);//cellTempList.get(6).toString()));
                        }

                        if (dateInString7.equals("-")) {
                            Date d2 = formatter.parse("2100-12-31");
                            objCertificado.setFecVencimiento1(d2);
                        } else {
                            Date date7 = null;
                            try {
                                date7 = formatter.parse(dateInString7);
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                            objCertificado.setFecVencimiento1(date7);//cellTempList.get(6).toString()));
                        }
                        objCertificado.setcIdentidadCert(cellTempList.get(8).toString());
                        objCertificado.setCodLocal(cellTempList.get(9).toString());
                        objCertificado.setUbigeo(cellTempList.get(10).toString());
                        objCertificado.setIdTarjeta(Integer.parseInt(cellTempList.get(11).toString()));

                        lstCertificados.add(objCertificado);

                        //objVehiculos.setIdTarjeta(cellTempList.get(i+12).toString());
                        objVehiculos.setPlaca(cellTempList.get(12).toString());
                        objVehiculos.setIdCertificado(Integer.parseInt(cellTempList.get(0).toString()));
                        //objVehiculos.setnTarjeta(cellTempList.get(i+14).toString());
                        //objVehiculos.setNombrePropietario(cellTempList.get(i+15).toString());
                        //objVehiculos.setDomicilio(cellTempList.get(i+16).toString());
                        //objVehiculos.setVersion(cellTempList.get(i+17).toString()); //Clase
                        objVehiculos.setIdMarca(cellTempList.get(17).toString());
                        objVehiculos.setAnio(0);//(Integer.parseInt(cellTempList.get(18).toString()));  VERIFICAR EL AÑO DE FABRICACIÓN
                        objVehiculos.setIdModelo(cellTempList.get(19).toString());
                        //objVehiculos.setVersion(cellTempList.get(i+21).toString());
                        objVehiculos.setIdCombustible(cellTempList.get(21).toString());
                        objVehiculos.setIdCarroceria(cellTempList.get(22).toString());
                        objVehiculos.setnEjes(4);//(Integer.parseInt(cellTempList.get(23).toString())); // VERIFICAR EL NÚMERO DE EJES
                        objVehiculos.setColor(cellTempList.get(24).toString());
                        objVehiculos.setMotor(cellTempList.get(25).toString());
                        objVehiculos.setNumCilindros(5);//(Integer.parseInt(cellTempList.get(26).toString())); // VERIFICAR EL NÚMERO DE CILINDROS
                        objVehiculos.setSerie(cellTempList.get(27).toString());
                        //objVehiculos.setVin(cellTempList.get(i+29).toString());
                        objVehiculos.setNumRuedas(1);//(Integer.parseInt(cellTempList.get(29).toString()));
                        objVehiculos.setNumPasajeros(1);//(Integer.parseInt(cellTempList.get(30).toString()));
                        objVehiculos.setNumAsientos(1);//(Integer.parseInt(cellTempList.get(31).toString()));
                        objVehiculos.setPesoNeto(1);//(Double.parseDouble(cellTempList.get(32).toString()));
                        objVehiculos.setPesoBruto(1);//(Double.parseDouble(cellTempList.get(33).toString()));
                        objVehiculos.setLargo(1);//(Double.parseDouble(cellTempList.get(34).toString()));
                        objVehiculos.setAlto(1);//(Double.parseDouble(cellTempList.get(35).toString()));
                        objVehiculos.setAncho(1);//(Double.parseDouble(cellTempList.get(36).toString()));
                        objVehiculos.setCargaUtil(1);//(Double.parseDouble(cellTempList.get(37).toString()));
                        //objVehiculos.setEstado(cellTempList.get(i+38).toString());

                        //Falta categoría
                        //Num Puertas
                        //Num Salidas
                        lstVehiculos.add(objVehiculos);

                        objResultado.setIdCertificado(Integer.parseInt(cellTempList.get(0).toString()));
                        objResultado.setPruebaAli(0);//(Integer.parseInt(cellTempList.get(45).toString()));                        
                        objResultado.setProfNeuma(0);//(Integer.parseInt(cellTempList.get(46).toString()));

                        objResultado.setPruebLuces(0);//(Integer.parseInt(cellTempList.get(48).toString()));
                        objResultado.setSuspension(0);//(Integer.parseInt(cellTempList.get(47).toString()));
                        objResultado.setEmigases(0);//(Integer.parseInt(cellTempList.get(49).toString()));
                        if ("APROBADO".equals(cellTempList.get(42).toString())) {
                            objResultado.setFreServ(1);
                        } else {
                            objResultado.setFreServ(0);
                        }
                        if ("APROBADO".equals(cellTempList.get(43).toString())) {
                            objResultado.setFreeEstac(1);
                        } else {
                            objResultado.setFreeEstac(0);
                        }
                        if ("APROBADO".equals(cellTempList.get(44).toString())) {
                            objResultado.setFreeEmer(1);
                        } else {
                            objResultado.setFreeEmer(0);
                        }

                        objResultado.setDisEjes(0);//(Integer.parseInt(cellTempList.get(48).toString()));
                        objResultado.setPisos(0);//(Integer.parseInt(cellTempList.get(48).toString()));

                        lstResultados.add(objResultado);

                    }

                    i = i + 1;

                }

                HSSFSheet worksheet2 = workbook.getSheet("Observaciones");

                Iterator rowIterator2 = worksheet2.rowIterator();

                i = 0;

                while (rowIterator2.hasNext()) {
                    HSSFRow hssfRow2 = (HSSFRow) rowIterator2.next();
                    Iterator iterator2 = hssfRow2.cellIterator();
                    List cellTempList2 = new ArrayList();
                    Observacion objObs = new Observacion();
                    while (iterator2.hasNext()) {
                        HSSFCell hssfCell2 = (HSSFCell) iterator2.next();
                        cellTempList2.add(hssfCell2);
                    }
                    int cont = cellTempList2.size();

                    if (i > 0) {
                        objObs.setIdCertificado(2); //(Integer.parseInt(cellTempList2.get(0).toString()));//(Integer.parseInt(cellTempList.get(i).toString()));
                        objObs.setCodigoObservacion(cellTempList2.get(1).toString());
                        objObs.setInterpretacion(cellTempList2.get(2).toString());
                        objObs.setCalificacion(cellTempList2.get(3).toString());

                        lstObservaciones.add(objObs);
                    }

                    i = i + 1;

                }

                //Verificar Si existe ese número de certificado
                WServiceBL objWServCBL = new WServiceBL();

                //Grabando los vehiculos leidos del excel                
                VehiculoBL objVehiculoBL = new VehiculoBL();
                for (int j = 0; j < lstVehiculos.size(); j++) {
                    Vehiculo objV = new Vehiculo();
                    objV = (Vehiculo) lstVehiculos.get(j);
                    int resultado = objWServCBL.existeVehiculo(objV.getIdCertificado());

                    if (resultado == 0) {
                        rpta = objVehiculoBL.registrarVehiculo(objV);
                    }
                }

                //Grabando los resultado leidos del excel                
                WServiceBL objWServBL = new WServiceBL();
                for (int j = 0; j < lstResultados.size(); j++) {
                    Resultados objR = new Resultados();
                    objR = (Resultados) lstResultados.get(j);
                    int resultado = 0; //objWServCBL.existeCertificado(objR.getIdCertificado());
                    if (resultado == 0) {
                        rpta = objWServBL.registrarResultado(objR);
                    }
                }

                //Grabando los certificados leidos del excel                
                WServiceBL objWServiceBL = new WServiceBL();
                for (int j = 0; j < lstCertificados.size(); j++) {
                    Certificado objR = new Certificado();
                    objR = (Certificado) lstCertificados.get(j);
                    int resultado = 0; //objWServCBL.existeCertificado(objR.getIdCertificado());
                    if (resultado == 0) {
                        rpta = objWServiceBL.registrarCertificado(objR);
                    }
                }

                //Grabando las observaciones leidos del excel   
                WServiceBL objObservacionesBL = new WServiceBL();
                for (int j = 0; j < lstObservaciones.size(); j++) {
                    Observacion objO = new Observacion();
                    objO = (Observacion) lstObservaciones.get(j);
                    int resultado = 0; //objWServCBL.existeCertificado(objO.getIdCertificado());
                    if (resultado == 0) {
                        rpta = objObservacionesBL.registrarObservacion(objO);
                    }
                }

                if (rpta == true) {
                    JOptionPane.showMessageDialog(null, "Base de datos actualizada correctamente", "", 1);
                } else {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al procesar la información. Póngase en contacto con el administrador", "", 0);
                }

            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (ParseException ex) {
                Logger.getLogger(frmImportarData.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (status == JFileChooser.CANCEL_OPTION) {
            System.out.println("cancele");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

}
